{"version":3,"file":"PhoneInputWithCountry.js","names":["React","PropTypes","classNames","InputSmart","InputBasic","CountrySelectWithIcon","CountrySelect","Flag","InternationalIcon","sortCountryOptions","isCountrySupportedWithError","getSupportedCountries","getSupportedCountryOptions","getCountries","createCountryIconComponent","metadata","metadataPropType","labels","labelsPropType","getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPhoneInputWithCountryStateUpdateFromNewProps","PhoneNumberInput_","PureComponent","constructor","props","instance","inputRef","current","ref","country","newCountry","international","onChange","focusInputOnCountrySelection","phoneDigits","prevPhoneDigits","prevCountry","state","newPhoneDigits","useNationalFormat","newValue","focus","setState","hasUserSelectedACountry","value","_phoneDigits","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","countries","currentlySelectedCountry","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","createRef","displayInitialValueAsLocalNumber","initialValueFormat","undefined","phoneNumber","CountryIcon","preSelectedCountry","required","componentDidMount","onCountryChange","selectedCountry","componentDidUpdate","prevProps","prevState","countryOptionsOrder","locales","useMemoCountrySelectOptions","countryNames","compareStringsLocales","countryOptions","getDerivedStateFromProps","render","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","countrySelectComponent","CountrySelectComponent","containerComponent","ContainerComponent","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","InputComponent","countrySelectOptions","onCountryFocus","onCountryBlur","setInputRef","PhoneNumberInput","forwardRef","propTypes","string","func","isRequired","bool","oneOf","arrayOf","oneOfType","objectOf","elementType","object","defaultProps","any","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","generator","dependencies","areEqualArrays","a","b","length","i"],"sources":["../source/PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport InputSmart from './InputSmart.js'\nimport InputBasic from './InputBasic.js'\n\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\n\nimport Flag from './Flag.js'\nimport InternationalIcon from './InternationalIcon.js'\n\nimport {\n\tsortCountryOptions,\n\tisCountrySupportedWithError,\n\tgetSupportedCountries,\n\tgetSupportedCountryOptions,\n\tgetCountries\n} from './helpers/countries.js'\n\nimport { createCountryIconComponent } from './CountryIcon.js'\n\nimport {\n\tmetadata as metadataPropType,\n\tlabels as labelsPropType\n} from './PropTypes.js'\n\nimport {\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tgetPhoneDigitsForNewCountry,\n\tgetInitialPhoneDigits,\n\tonPhoneDigitsChange,\n\te164\n} from './helpers/phoneInputHelpers.js'\n\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\n\nclass PhoneNumberInput_ extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.inputRef = React.createRef()\n\n\t\tconst {\n\t\t\tvalue,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\taddInternationalOption,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tlet {\n\t\t\tdefaultCountry,\n\t\t\tcountries\n\t\t} = this.props\n\n\t\t// Validate `defaultCountry`.\n\t\tif (defaultCountry) {\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\tdefaultCountry = undefined\n\t\t\t}\n\t\t}\n\n\t\t// Validate `countries`.\n\t\tcountries = getSupportedCountries(countries, metadata)\n\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\n\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\n\n\t\tconst preSelectedCountry = getPreSelectedCountry({\n\t\t\tvalue,\n\t\t\tphoneNumber,\n\t\t\tdefaultCountry,\n\t\t\trequired: !addInternationalOption,\n\t\t\tcountries: countries || getCountries(metadata),\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\n\t\t\tmetadata\n\t\t})\n\n\t\tthis.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: preSelectedCountry,\n\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\n\t\t\t// For example, a developer might theoretically pass some unsupported\n\t\t\t// countries as part of the `countries` property, and because of that\n\t\t\t// the component uses `this.state.countries` (which are filtered)\n\t\t\t// instead of `this.props.countries`\n\t\t\t// (which could potentially contain unsupported countries).\n\t\t\tcountries,\n\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n\t\t\tphoneDigits: getInitialPhoneDigits({\n\t\t\t\tvalue,\n\t\t\t\tphoneNumber,\n\t\t\t\tdefaultCountry,\n\t\t\t\tinternational,\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n\t\t\t\tmetadata\n\t\t\t}),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `phoneDigits` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { onCountryChange } = this.props\n\t\tlet { defaultCountry } = this.props\n\t\tconst { country: selectedCountry } = this.state\n\t\tif (onCountryChange) {\n\t\t\tif (defaultCountry) {\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\t\tdefaultCountry = undefined\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedCountry !== defaultCountry) {\n\t\t\t\tonCountryChange(selectedCountry)\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { onCountryChange } = this.props\n\t\tconst { country } = this.state\n\t\t// Call `onCountryChange` when user selects another country.\n\t\tif (onCountryChange && country !== prevState.country) {\n\t\t\tonCountryChange(country)\n\t\t}\n\t}\n\n\tsetInputRef = (instance) => {\n\t\tthis.inputRef.current = instance\n\t\tconst { inputRef: ref } = this.props\n\t\tif (ref) {\n\t\t\tif (typeof ref === 'function') {\n\t\t\t\tref(instance)\n\t\t\t} else {\n\t\t\t\tref.current = instance\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCountrySelectOptions({ countries }) {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tlocales,\n\t\t\tmetadata\n\t\t} = this.props\n\t\treturn useMemoCountrySelectOptions(() => {\n\t\t\treturn sortCountryOptions(\n\t\t\t\tgetCountrySelectOptions({\n\t\t\t\t\tcountries: countries || getCountries(metadata),\n\t\t\t\t\tcountryNames: labels,\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\n\t\t\t\t\tcompareStringsLocales: locales,\n\t\t\t\t\t// compareStrings\n\t\t\t\t}),\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\n\t\t\t)\n\t\t}, [\n\t\t\tcountries,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tmetadata\n\t\t])\n\t}\n\n\tgetFirstSupportedCountry({ countries }) {\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\n\t\treturn countryOptions[0].value\n\t}\n\n\t// A shorthand for not passing `metadata` as a second argument.\n\tisCountrySupportedWithError = (country) => {\n\t\tconst { metadata } = this.props\n\t\treturn isCountrySupportedWithError(country, metadata)\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountryChange = (newCountry) => {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tmetadata,\n\t\t\tonChange,\n\t\t\tfocusInputOnCountrySelection\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: prevCountry\n\t\t} = this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n\t\t\tprevCountry,\n\t\t\tnewCountry,\n\t\t\tmetadata,\n\t\t\t// Convert the phone number to \"national\" format\n\t\t\t// when the user changes the selected country by hand.\n\t\t\tuseNationalFormat: !international\n\t\t})\n\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\tif (focusInputOnCountrySelection) {\n\t\t\tthis.inputRef.current.focus()\n\t\t}\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the `defaultCountry` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\tthis.setState({\n\t\t\tcountry: newCountry,\n\t\t\thasUserSelectedACountry: true,\n\t\t\tphoneDigits: newPhoneDigits,\n\t\t\tvalue: newValue\n\t\t},\n\t\t() => {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(newValue)\n\t\t})\n\t}\n\n\t/**\n\t * `<input/>` `onChange()` handler.\n\t * Updates `value` property accordingly (so that they are kept in sync).\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t */\n\tonChange = (_phoneDigits) => {\n\t\tconst {\n\t\t\tdefaultCountry,\n\t\t\tonChange,\n\t\t\taddInternationalOption,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountries,\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry\n\t\t} = this.state\n\n\t\tconst {\n\t\t\tphoneDigits,\n\t\t\tcountry,\n\t\t\tvalue\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\n\t\t\tprevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry,\n\t\t\tcountryRequired: !addInternationalOption,\n\t\t\tdefaultCountry,\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t})\n\n\t\tconst stateUpdate = {\n\t\t\tphoneDigits,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t}\n\n\t\tif (countryCallingCodeEditable === false) {\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\n\t\t\t// then it would have no effect when erasing an inital international prefix\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\n\t\t\t// so the component wouldn't rerender, and the user would be able\n\t\t\t// to erase the country calling code part, and that part is\n\t\t\t// assumed to be non-eraseable. That's why the component is\n\t\t\t// forcefully rerendered here.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\n\t\t\t\tstateUpdate.forceRerender = {}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState(\n\t\t\tstateUpdate,\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\t() => onChange(value)\n\t\t)\n\t}\n\n\t// Toggles the `--focus` CSS class.\n\t_onFocus = () => this.setState({ isFocused: true })\n\n\t// Toggles the `--focus` CSS class.\n\t_onBlur = () => this.setState({ isFocused: false })\n\n\tonFocus = (event) => {\n\t\tthis._onFocus()\n\t\tconst { onFocus } = this.props\n\t\tif (onFocus) {\n\t\t\tonFocus(event)\n\t\t}\n\t}\n\n\tonBlur = (event) => {\n\t\tconst { onBlur } = this.props\n\t\tthis._onBlur()\n\t\tif (onBlur) {\n\t\t\tonBlur(event)\n\t\t}\n\t}\n\n\tonCountryFocus = (event) => {\n\t\tthis._onFocus()\n\t\t// this.setState({ countrySelectFocused: true })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onFocus } = countrySelectProps\n\t\t\tif (onFocus) {\n\t\t\t\tonFocus(event)\n\t\t\t}\n\t\t}\n\t}\n\n\tonCountryBlur = (event) => {\n\t\tthis._onBlur()\n\t\t// this.setState({ countrySelectFocused: false })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onBlur } = countrySelectProps\n\t\t\tif (onBlur) {\n\t\t\t\tonBlur(event)\n\t\t\t}\n\t\t}\n\t}\n\n\t// `state` holds previous props as `props`, and also:\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n\t// (and a couple of other less significant properties)\n\tstatic getDerivedStateFromProps(props, state) {\n\t\treturn {\n\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\tprops,\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\t// Generic HTML attributes.\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\treadOnly,\n\t\t\tautoComplete,\n\t\t\tstyle,\n\t\t\tclassName,\n\n\t\t\t// Number `<input/>` properties.\n\t\t\tinputRef,\n\t\t\tinputComponent,\n\t\t\tnumberInputProps,\n\t\t\tsmartCaret,\n\n\t\t\t// Country `<select/>` properties.\n\t\t\tcountrySelectComponent: CountrySelectComponent,\n\t\t\tcountrySelectProps,\n\n\t\t\t// Container `<div/>` properties.\n\t\t\tcontainerComponent: ContainerComponent,\n\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\n\t\t\tdefaultCountry,\n\t\t\tcountries: countriesProperty,\n\t\t\tcountryOptionsOrder,\n\t\t\tlabels,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagUrl,\n\t\t\taddInternationalOption,\n\t\t\tinternationalIcon,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tonCountryChange,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tfocusInputOnCountrySelection,\n\t\t\treset,\n\t\t\tmetadata,\n\t\t\tinternational,\n\t\t\tlocales,\n\t\t\t// compareStrings,\n\t\t\t...rest\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tphoneDigits,\n\t\t\tisFocused\n\t\t} = this.state\n\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\n\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\n\n\t\treturn (\n\t\t\t<ContainerComponent\n\t\t\t\tstyle={style}\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\n\t\t\t\t\t'PhoneInput--focus': isFocused,\n\t\t\t\t\t'PhoneInput--disabled': disabled,\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\n\t\t\t\t})}>\n\n\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t<CountrySelectComponent\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\n\t\t\t\t\taria-label={labels.country}\n\t\t\t\t\t{...countrySelectProps}\n\t\t\t\t\tvalue={country}\n\t\t\t\t\toptions={countrySelectOptions}\n\t\t\t\t\tonChange={this.onCountryChange}\n\t\t\t\t\tonFocus={this.onCountryFocus}\n\t\t\t\t\tonBlur={this.onCountryBlur}\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\n\n\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t<InputComponent\n\t\t\t\t\tref={this.setInputRef}\n\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\tautoComplete={autoComplete}\n\t\t\t\t\t{...numberInputProps}\n\t\t\t\t\t{...rest}\n\t\t\t\t\tname={name}\n\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\tcountry={country}\n\t\t\t\t\tvalue={phoneDigits || ''}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tonFocus={this.onFocus}\n\t\t\t\t\tonBlur={this.onBlur}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\tinputComponent={inputComponent}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'PhoneInputInput',\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\n\t\t\t\t\t\trest.className\n\t\t\t\t\t)}/>\n\t\t\t</ContainerComponent>\n\t\t)\n\t}\n}\n\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\n))\n\nPhoneNumberInput.propTypes = {\n\t/**\n\t * Phone number in `E.164` format.\n\t *\n\t * Example:\n\t *\n\t * `\"+12223333333\"`\n\t *\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\n\t */\n\tvalue: PropTypes.string,\n\n\t/**\n\t * A function of `value: string?`.\n\t *\n\t * Updates the `value` property as the user inputs a phone number.\n\t *\n\t * If the user erases the input value, the argument is `undefined`.\n\t */\n\tonChange: PropTypes.func.isRequired,\n\n\t/**\n\t * Toggles the `--focus` CSS class.\n\t * @ignore\n\t */\n\tonFocus: PropTypes.func,\n\n\t/**\n\t * `onBlur` is usually passed by `redux-form`.\n\t * @ignore\n\t */\n\tonBlur: PropTypes.func,\n\n\t/**\n\t * Set to `true` to mark both the phone number `<input/>`\n\t * and the country `<select/>` as `disabled`.\n\t */\n\tdisabled: PropTypes.bool,\n\n\t/**\n\t * Set to `true` to mark both the phone number `<input/>`\n\t * and the country `<select/>` as `readonly`.\n\t */\n\treadOnly: PropTypes.bool,\n\n\t/**\n\t * Sets `autoComplete` property for phone number `<input/>`.\n\t *\n\t * Web browser's \"autocomplete\" feature\n\t * remembers the phone number being input\n\t * and can also autofill the `<input/>`\n\t * with previously remembered phone numbers.\n\t *\n\t * https://developers.google.com\n\t * /web/updates/2015/06/checkout-faster-with-autofill\n\t *\n\t * For example, can be used to turn it off:\n\t *\n\t * \"So when should you use `autocomplete=\"off\"`?\n\t *  One example is when you've implemented your own version\n\t *  of autocomplete for search. Another example is any form field\n\t *  where users will input and submit different kinds of information\n\t *  where it would not be useful to have the browser remember\n\t *  what was submitted previously\".\n\t */\n\t// (is `\"tel\"` by default)\n\tautoComplete: PropTypes.string.isRequired,\n\n\t/**\n\t * Set to `\"national\"` to show the initial `value` in\n\t * \"national\" format rather than \"international\".\n\t *\n\t * For example, if `initialValueFormat` is `\"national\"`\n\t * and the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\n\t *\n\t * By default, `initialValueFormat` is `undefined`,\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n\t *\n\t * The reason for such default behaviour is that\n\t * the newer generation grows up when there are no stationary phones\n\t * and therefore everyone inputs phone numbers in international format\n\t * in their smartphones so people gradually get more accustomed to\n\t * writing phone numbers in international format rather than in local format.\n\t * Future people won't be using \"national\" format, only \"international\".\n\t */\n\t// (is `undefined` by default)\n\tinitialValueFormat: PropTypes.oneOf(['national']),\n\n\t// `displayInitialValueAsLocalNumber` property has been\n\t// superceded by `initialValueFormat` property.\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\n\n\t/**\n\t * The country to be selected by default.\n\t * For example, can be set after a GeoIP lookup.\n\t *\n\t * Example: `\"US\"`.\n\t */\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\tdefaultCountry: PropTypes.string,\n\n\t/**\n\t * If specified, only these countries will be available for selection.\n\t *\n\t * Example:\n\t *\n\t * `[\"RU\", \"UA\", \"KZ\"]`\n\t */\n\tcountries: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * Custom country `<select/>` option names.\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n\t *\n\t * Example:\n\t *\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n\t *\n\t * See the `locales` directory for examples.\n\t */\n\tlabels: labelsPropType.isRequired,\n\n\t/**\n\t * Country `<select/>` options are sorted by their labels.\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\n\t * Some languages, like Chinese, support multiple sorting variants\n\t * (called \"collations\"), and the user might prefer one or another.\n\t * Also, sometimes the Operating System language is not always\n\t * the preferred language for a person using a website or an application,\n\t * so there should be a way to specify custom locale.\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n\t */\n\tlocales: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.arrayOf(PropTypes.string)\n\t]),\n\n\t/*\n\t * Custom country `<select/>` options sorting function.\n\t * The default one uses `a.localeCompare(b)`, and,\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\n\t * There have been requests to add custom sorter for cases\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\n\tcompareStrings: PropTypes.func,\n\t */\n\n\t/**\n\t * A URL template of a country flag, where\n\t * \"{XX}\" is a two-letter country code in upper case,\n\t * or where \"{xx}\" is a two-letter country code in lower case.\n\t * By default it points to `country-flag-icons` gitlab pages website.\n\t * I imagine someone might want to download those country flag icons\n\t * and host them on their own servers instead\n\t * (all flags are available in the `country-flag-icons` library).\n\t * There's a catch though: new countries may be added in future,\n\t * so when hosting country flag icons on your own server\n\t * one should check the `CHANGELOG.md` every time before updating this library,\n\t * otherwise there's a possibility that some new country flag would be missing.\n\t */\n\tflagUrl: PropTypes.string.isRequired,\n\n\t/**\n\t * Custom country flag icon components.\n\t * These flags will be used instead of the default ones.\n\t * The the \"Flags\" section of the readme for more info.\n\t *\n\t * The shape is an object where keys are country codes\n\t * and values are flag icon components.\n\t * Flag icon components receive the same properties\n\t * as `flagComponent` (see below).\n\t *\n\t * Example:\n\t *\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\n\t *\n\t * Example:\n\t *\n\t * `import flags from 'country-flag-icons/react/3x2'`\n\t *\n\t * `import PhoneInput from 'react-phone-number-input'`\n\t *\n\t * `<PhoneInput flags={flags} .../>`\n\t */\n\tflags: PropTypes.objectOf(PropTypes.elementType),\n\n\t/**\n\t * Country flag icon component.\n\t *\n\t * Takes properties:\n\t *\n\t * * `country: string` — The country code.\n\t * * `countryName: string` — The country name.\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\n\t * * `flags: object` — The `flags` property (see above).\n\t */\n\tflagComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\n\t */\n\taddInternationalOption: PropTypes.bool.isRequired,\n\n\t/**\n\t * \"International\" icon component.\n\t * Should have the same aspect ratio.\n\t *\n\t * Receives properties:\n\t *\n\t * * `title: string` — \"International\" country option label.\n\t */\n\tinternationalIcon: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\n\t *\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\n\t * * `\"🌐\"` — inserts \"International\" option.\n\t * * `\"|\"` — inserts a separator.\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\n\t *\n\t * Example:\n\t *\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n\t */\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * `<Phone/>` component CSS style object.\n\t */\n\tstyle: PropTypes.object,\n\n\t/**\n\t * `<Phone/>` component CSS class.\n\t */\n\tclassName: PropTypes.string,\n\n\t/**\n\t * Country `<select/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `name: string?` — HTML `name` attribute.\n\t * * `value: string?` — The currently selected country code.\n\t * * `onChange(value: string?)` — Updates the `value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\n\t * * `className: string` — CSS class name.\n\t */\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Country `<select/>` component props.\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\n\t */\n\tcountrySelectProps: PropTypes.object,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `value: string` — The formatted `value`.\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n\t *\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n\t */\n\tinputComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `style: object` — A component CSS style object.\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\n\t */\n\tcontainerComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Phone number `<input/>` component props.\n\t */\n\tnumberInputProps: PropTypes.object,\n\n\t/**\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\n\t * the caret position is moved right before the next available digit skipping\n\t * any punctuation in between. This is called \"smart\" caret positioning.\n\t * Another case would be the phone number format changing as a result of\n\t * the user inserting the digit somewhere in the middle, which would require\n\t * re-positioning the caret because all digit positions have changed.\n\t * This \"smart\" caret positioning feature can be turned off by passing\n\t * `smartCaret={false}` property: use it in case of any possible issues\n\t * with caret position during phone number input.\n\t */\n\t// Is `true` by default.\n\tsmartCaret: PropTypes.bool.isRequired,\n\n\t/**\n\t * Set to `true` to force \"international\" phone number format.\n\t * Set to `false` to force \"national\" phone number format.\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\n\t */\n\tinternational: PropTypes.bool,\n\n\t/**\n\t * If set to `true`, the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: PropTypes.bool.isRequired,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\n\n\t/**\n\t * `libphonenumber-js` metadata.\n\t *\n\t * Can be used to pass custom `libphonenumber-js` metadata\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\n\t */\n\tmetadata: metadataPropType.isRequired,\n\n\t/**\n\t * Is called every time the selected country changes:\n\t * either programmatically or when user selects it manually from the list.\n\t */\n\t// People have been asking for a way to get the selected country.\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t// For some it's just a \"business requirement\".\n\t// I guess it's about gathering as much info on the user as a website can\n\t// without introducing any addional fields that would complicate the form\n\t// therefore reducing \"conversion\" (that's a marketing term).\n\t// Assuming that the phone number's country is the user's country\n\t// is not 100% correct but in most cases I guess it's valid.\n\tonCountryChange: PropTypes.func,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\n}\n\nPhoneNumberInput.defaultProps = {\n\t/**\n\t * Remember (and autofill) the value as a phone number.\n\t */\n\tautoComplete: 'tel',\n\n\t/**\n\t * Country `<select/>` component.\n\t */\n\tcountrySelectComponent: CountrySelect,\n\n\t/**\n\t * Flag icon component.\n\t */\n\tflagComponent: Flag,\n\n\t/**\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\n\t */\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n\t/**\n\t * Default \"International\" country `<select/>` option icon.\n\t */\n\tinternationalIcon: InternationalIcon,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t */\n\tinputComponent: 'input',\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t */\n\tcontainerComponent: 'div',\n\n\t/**\n\t * Some users requested a way to reset the component:\n\t * both number `<input/>` and country `<select/>`.\n\t * Whenever `reset` property changes both number `<input/>`\n\t * and country `<select/>` are reset.\n\t * It's not implemented as some instance `.reset()` method\n\t * because `ref` is forwarded to `<input/>`.\n\t * It's also not replaced with just resetting `country` on\n\t * external `value` reset, because a user could select a country\n\t * and then not input any `value`, and so the selected country\n\t * would be \"stuck\", if not using this `reset` property.\n\t */\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\treset: PropTypes.any,\n\n\t/**\n\t *\n\t */\n\n\t/**\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\n\t */\n\tsmartCaret: true,\n\n\t/**\n\t * Whether to add the \"International\" option\n\t * to the list of countries.\n\t */\n\taddInternationalOption: true,\n\n\t/**\n\t * If set to `true` the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: false,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: true,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: true\n}\n\nexport default PhoneNumberInput\n\nlet countrySelectOptionsMemo\nlet countrySelectOptionsMemoDependencies\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n\tif (!countrySelectOptionsMemoDependencies ||\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n\t\tcountrySelectOptionsMemo = generator()\n\t\tcountrySelectOptionsMemoDependencies = dependencies\n\t}\n\treturn countrySelectOptionsMemo\n}\n\nfunction areEqualArrays(a, b) {\n\tif (a.length !== b.length) {\n\t\treturn false\n\t}\n\tlet i = 0\n\twhile (i < a.length) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t}\n\treturn true\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,SAASC,qBAAqB,IAAIC,aAAlC,QAAuD,oBAAvD;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AAEA,SACCC,kBADD,EAECC,2BAFD,EAGCC,qBAHD,EAICC,0BAJD,EAKCC,YALD,QAMO,wBANP;AAQA,SAASC,0BAAT,QAA2C,kBAA3C;AAEA,SACCC,QAAQ,IAAIC,gBADb,EAECC,MAAM,IAAIC,cAFX,QAGO,gBAHP;AAKA,SACCC,qBADD,EAECC,uBAFD,EAGCC,gBAHD,EAICC,4BAJD,EAKCC,2BALD,EAMCC,qBAND,EAOCC,mBAPD,EAQCC,IARD,QASO,gCATP;AAWA,OAAOC,+CAAP,MAA4D,8DAA5D;;AAEA,MAAMC,iBAAN,SAAgC5B,KAAK,CAAC6B,aAAtC,CAAoD;EACnDC,WAAW,CAACC,KAAD,EAAQ;IAClB,MAAMA,KAAN;;IADkB,qCAoHJC,QAAD,IAAc;MAC3B,KAAKC,QAAL,CAAcC,OAAd,GAAwBF,QAAxB;MACA,MAAM;QAAEC,QAAQ,EAAEE;MAAZ,IAAoB,KAAKJ,KAA/B;;MACA,IAAII,GAAJ,EAAS;QACR,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;UAC9BA,GAAG,CAACH,QAAD,CAAH;QACA,CAFD,MAEO;UACNG,GAAG,CAACD,OAAJ,GAAcF,QAAd;QACA;MACD;IACD,CA9HkB;;IAAA,qDAoKYI,OAAD,IAAa;MAC1C,MAAM;QAAErB;MAAF,IAAe,KAAKgB,KAA1B;MACA,OAAOrB,2BAA2B,CAAC0B,OAAD,EAAUrB,QAAV,CAAlC;IACA,CAvKkB;;IAAA,yCA0KAsB,UAAD,IAAgB;MACjC,MAAM;QACLC,aADK;QAELvB,QAFK;QAGLwB,QAHK;QAILC;MAJK,IAKF,KAAKT,KALT;MAOA,MAAM;QACLU,WAAW,EAAEC,eADR;QAELN,OAAO,EAAEO;MAFJ,IAGF,KAAKC,KAHT,CARiC,CAajC;MACA;MACA;;MACA,MAAMC,cAAc,GAAGtB,2BAA2B,CAACmB,eAAD,EAAkB;QACnEC,WADmE;QAEnEN,UAFmE;QAGnEtB,QAHmE;QAInE;QACA;QACA+B,iBAAiB,EAAE,CAACR;MAN+C,CAAlB,CAAlD;MASA,MAAMS,QAAQ,GAAGrB,IAAI,CAACmB,cAAD,EAAiBR,UAAjB,EAA6BtB,QAA7B,CAArB,CAzBiC,CA2BjC;;MACA,IAAIyB,4BAAJ,EAAkC;QACjC,KAAKP,QAAL,CAAcC,OAAd,CAAsBc,KAAtB;MACA,CA9BgC,CAgCjC;MACA;MACA;MACA;;;MAEA,KAAKC,QAAL,CAAc;QACbb,OAAO,EAAEC,UADI;QAEba,uBAAuB,EAAE,IAFZ;QAGbT,WAAW,EAAEI,cAHA;QAIbM,KAAK,EAAEJ;MAJM,CAAd,EAMA,MAAM;QACL;QACA;QACA;QACA;QACAR,QAAQ,CAACQ,QAAD,CAAR;MACA,CAZD;IAaA,CA5NkB;;IAAA,kCAmOPK,YAAD,IAAkB;MAC5B,MAAM;QACLC,cADK;QAELd,QAFK;QAGLe,sBAHK;QAILhB,aAJK;QAKLiB,cALK;QAMLC,0BANK;QAOLzC;MAPK,IAQF,KAAKgB,KART;MAUA,MAAM;QACL0B,SADK;QAELhB,WAAW,EAAEC,eAFR;QAGLN,OAAO,EAAEsB;MAHJ,IAIF,KAAKd,KAJT;MAMA,MAAM;QACLH,WADK;QAELL,OAFK;QAGLe;MAHK,IAIF1B,mBAAmB,CAAC2B,YAAD,EAAe;QACrCV,eADqC;QAErCN,OAAO,EAAEsB,wBAF4B;QAGrCC,eAAe,EAAE,CAACL,sBAHmB;QAIrCD,cAJqC;QAKrCO,aAAa,EAAE,MAAM,KAAKC,wBAAL,CAA8B;UAAEJ;QAAF,CAA9B,CALgB;QAMrCA,SANqC;QAOrCnB,aAPqC;QAQrCiB,cARqC;QASrCC,0BATqC;QAUrCzC;MAVqC,CAAf,CAJvB;MAiBA,MAAM+C,WAAW,GAAG;QACnBrB,WADmB;QAEnBU,KAFmB;QAGnBf;MAHmB,CAApB;;MAMA,IAAIoB,0BAA0B,KAAK,KAAnC,EAA0C;QACzC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,CAACL,KAAD,IAAUV,WAAW,KAAK,KAAKG,KAAL,CAAWH,WAAzC,EAAsD;UACrD;UACAqB,WAAW,CAACC,aAAZ,GAA4B,EAA5B;QACA;MACD;;MAED,KAAKd,QAAL,CACCa,WADD,EAEC;MACA;MACA;MACA;MACA,MAAMvB,QAAQ,CAACY,KAAD,CANf;IAQA,CAnSkB;;IAAA,kCAsSR,MAAM,KAAKF,QAAL,CAAc;MAAEe,SAAS,EAAE;IAAb,CAAd,CAtSE;;IAAA,iCAyST,MAAM,KAAKf,QAAL,CAAc;MAAEe,SAAS,EAAE;IAAb,CAAd,CAzSG;;IAAA,iCA2SRC,KAAD,IAAW;MACpB,KAAKC,QAAL;;MACA,MAAM;QAAEC;MAAF,IAAc,KAAKpC,KAAzB;;MACA,IAAIoC,OAAJ,EAAa;QACZA,OAAO,CAACF,KAAD,CAAP;MACA;IACD,CAjTkB;;IAAA,gCAmTTA,KAAD,IAAW;MACnB,MAAM;QAAEG;MAAF,IAAa,KAAKrC,KAAxB;;MACA,KAAKsC,OAAL;;MACA,IAAID,MAAJ,EAAY;QACXA,MAAM,CAACH,KAAD,CAAN;MACA;IACD,CAzTkB;;IAAA,wCA2TDA,KAAD,IAAW;MAC3B,KAAKC,QAAL,GAD2B,CAE3B;;;MACA,MAAM;QAAEI;MAAF,IAAyB,KAAKvC,KAApC;;MACA,IAAIuC,kBAAJ,EAAwB;QACvB,MAAM;UAAEH;QAAF,IAAcG,kBAApB;;QACA,IAAIH,OAAJ,EAAa;UACZA,OAAO,CAACF,KAAD,CAAP;QACA;MACD;IACD,CArUkB;;IAAA,uCAuUFA,KAAD,IAAW;MAC1B,KAAKI,OAAL,GAD0B,CAE1B;;;MACA,MAAM;QAAEC;MAAF,IAAyB,KAAKvC,KAApC;;MACA,IAAIuC,kBAAJ,EAAwB;QACvB,MAAM;UAAEF;QAAF,IAAaE,kBAAnB;;QACA,IAAIF,MAAJ,EAAY;UACXA,MAAM,CAACH,KAAD,CAAN;QACA;MACD;IACD,CAjVkB;;IAGlB,KAAKhC,QAAL,gBAAgBjC,KAAK,CAACuE,SAAN,EAAhB;IAEA,MAAM;MACLpB,KAAK,EAALA,MADK;MAELlC,MAFK;MAGLqB,aAAa,EAAbA,cAHK;MAILgB,sBAAsB,EAAtBA,uBAJK;MAKL;MACA;MACAkB,gCAPK;MAQLC,kBARK;MASL1D,QAAQ,EAARA;IATK,IAUF,KAAKgB,KAVT;IAYA,IAAI;MACHsB,cAAc,EAAdA,eADG;MAEHI,SAAS,EAATA;IAFG,IAGA,KAAK1B,KAHT,CAjBkB,CAsBlB;;IACA,IAAIsB,eAAJ,EAAoB;MACnB,IAAI,CAAC,KAAK3C,2BAAL,CAAiC2C,eAAjC,CAAL,EAAuD;QACtDA,eAAc,GAAGqB,SAAjB;MACA;IACD,CA3BiB,CA6BlB;;;IACAjB,UAAS,GAAG9C,qBAAqB,CAAC8C,UAAD,EAAY1C,SAAZ,CAAjC;IAEA,MAAM4D,WAAW,GAAGtD,gBAAgB,CAAC8B,MAAD,EAAQpC,SAAR,CAApC;IAEA,KAAK6D,WAAL,GAAmB9D,0BAA0B,CAAC,KAAKiB,KAAN,CAA7C;IAEA,MAAM8C,kBAAkB,GAAG1D,qBAAqB,CAAC;MAChDgC,KAAK,EAALA,MADgD;MAEhDwB,WAFgD;MAGhDtB,cAAc,EAAdA,eAHgD;MAIhDyB,QAAQ,EAAE,CAACxB,uBAJqC;MAKhDG,SAAS,EAAEA,UAAS,IAAI5C,YAAY,CAACE,SAAD,CALY;MAMhD6C,aAAa,EAAE,MAAM,KAAKC,wBAAL,CAA8B;QAAEJ,SAAS,EAATA;MAAF,CAA9B,CAN2B;MAOhD1C,QAAQ,EAARA;IAPgD,CAAD,CAAhD;IAUA,KAAK6B,KAAL,GAAa;MACZ;MACAb,KAAK,EAAE,KAAKA,KAFA;MAIZ;MACAK,OAAO,EAAEyC,kBALG;MAOZ;MACA;MACA;MACA;MACA;MACA;MACApB,SAAS,EAATA,UAbY;MAeZ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAhB,WAAW,EAAEjB,qBAAqB,CAAC;QAClC2B,KAAK,EAALA,MADkC;QAElCwB,WAFkC;QAGlCtB,cAAc,EAAdA,eAHkC;QAIlCf,aAAa,EAAbA,cAJkC;QAKlCQ,iBAAiB,EAAE0B,gCAAgC,IAAIC,kBAAkB,KAAK,UAL5C;QAMlC1D,QAAQ,EAARA;MANkC,CAAD,CAzBtB;MAkCZ;MACA;MACA;MACA;MACA;MACA;MACA;MACAoC,KAAK,EAALA;IAzCY,CAAb;EA2CA;;EAED4B,iBAAiB,GAAG;IACnB,MAAM;MAAEC;IAAF,IAAsB,KAAKjD,KAAjC;IACA,IAAI;MAAEsB;IAAF,IAAqB,KAAKtB,KAA9B;IACA,MAAM;MAAEK,OAAO,EAAE6C;IAAX,IAA+B,KAAKrC,KAA1C;;IACA,IAAIoC,eAAJ,EAAqB;MACpB,IAAI3B,cAAJ,EAAoB;QACnB,IAAI,CAAC,KAAK3C,2BAAL,CAAiC2C,cAAjC,CAAL,EAAuD;UACtDA,cAAc,GAAGqB,SAAjB;QACA;MACD;;MACD,IAAIO,eAAe,KAAK5B,cAAxB,EAAwC;QACvC2B,eAAe,CAACC,eAAD,CAAf;MACA;IACD;EACD;;EAEDC,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;IACxC,MAAM;MAAEJ;IAAF,IAAsB,KAAKjD,KAAjC;IACA,MAAM;MAAEK;IAAF,IAAc,KAAKQ,KAAzB,CAFwC,CAGxC;;IACA,IAAIoC,eAAe,IAAI5C,OAAO,KAAKgD,SAAS,CAAChD,OAA7C,EAAsD;MACrD4C,eAAe,CAAC5C,OAAD,CAAf;IACA;EACD;;EAcDhB,uBAAuB,OAAgB;IAAA,IAAf;MAAEqC;IAAF,CAAe;IACtC,MAAM;MACLnB,aADK;MAELkB,0BAFK;MAGL6B,mBAHK;MAIL/B,sBAJK;MAKLrC,MALK;MAMLqE,OANK;MAOLvE;IAPK,IAQF,KAAKgB,KART;IASA,OAAOwD,2BAA2B,CAAC,MAAM;MACxC,OAAO9E,kBAAkB,CACxBW,uBAAuB,CAAC;QACvBqC,SAAS,EAAEA,SAAS,IAAI5C,YAAY,CAACE,QAAD,CADb;QAEvByE,YAAY,EAAEvE,MAFS;QAGvBqC,sBAAsB,EAAGhB,aAAa,IAAIkB,0BAA0B,KAAK,KAAjD,GAA0D,KAA1D,GAAkEF,sBAHnE;QAIvBmC,qBAAqB,EAAEH,OAJA,CAKvB;;MALuB,CAAD,CADC,EAQxB1E,0BAA0B,CAACyE,mBAAD,EAAsBtE,QAAtB,CARF,CAAzB;IAUA,CAXiC,EAW/B,CACF0C,SADE,EAEF4B,mBAFE,EAGF/B,sBAHE,EAIFrC,MAJE,EAKFF,QALE,CAX+B,CAAlC;EAkBA;;EAED8C,wBAAwB,QAAgB;IAAA,IAAf;MAAEJ;IAAF,CAAe;IACvC,MAAMiC,cAAc,GAAG,KAAKtE,uBAAL,CAA6B;MAAEqC;IAAF,CAA7B,CAAvB;IACA,OAAOiC,cAAc,CAAC,CAAD,CAAd,CAAkBvC,KAAzB;EACA,CAlKkD,CAoKnD;;;EAgLA;EACA;EACA;EACA;EACA;EAC+B,OAAxBwC,wBAAwB,CAAC5D,KAAD,EAAQa,KAAR,EAAe;IAC7C,OAAO;MACN;MACAb,KAFM;MAGN,GAAGJ,+CAA+C,CAACI,KAAD,EAAQa,KAAK,CAACb,KAAd,EAAqBa,KAArB;IAH5C,CAAP;EAKA;;EAEDgD,MAAM,GAAG;IACR,MAAM;MACL;MACAC,IAFK;MAGLC,QAHK;MAILC,QAJK;MAKLC,YALK;MAMLC,KANK;MAOLC,SAPK;MASL;MACAjE,QAVK;MAWLkE,cAXK;MAYLC,gBAZK;MAaLC,UAbK;MAeL;MACAC,sBAAsB,EAAEC,sBAhBnB;MAiBLjC,kBAjBK;MAmBL;MACAkC,kBAAkB,EAAEC,kBApBf;MAsBL;MACApD,cAvBK;MAwBLI,SAAS,EAAEiD,iBAxBN;MAyBLrB,mBAzBK;MA0BLpE,MA1BK;MA2BL0F,KA3BK;MA4BLC,aA5BK;MA6BLC,OA7BK;MA8BLvD,sBA9BK;MA+BLwD,iBA/BK;MAgCL;MACA;MACAtC,gCAlCK;MAmCLC,kBAnCK;MAoCLO,eApCK;MAqCLzB,cArCK;MAsCLC,0BAtCK;MAuCLhB,4BAvCK;MAwCLuE,KAxCK;MAyCLhG,QAzCK;MA0CLuB,aA1CK;MA2CLgD,OA3CK;MA4CL;MACA,GAAG0B;IA7CE,IA8CF,KAAKjF,KA9CT;IAgDA,MAAM;MACLK,OADK;MAELqB,SAFK;MAGLhB,WAHK;MAILuB;IAJK,IAKF,KAAKpB,KALT;IAOA,MAAMqE,cAAc,GAAGZ,UAAU,GAAGlG,UAAH,GAAgBC,UAAjD;IAEA,MAAM8G,oBAAoB,GAAG,KAAK9F,uBAAL,CAA6B;MAAEqC;IAAF,CAA7B,CAA7B;IAEA,oBACC,oBAAC,kBAAD;MACC,KAAK,EAAEwC,KADR;MAEC,SAAS,EAAE/F,UAAU,CAACgG,SAAD,EAAY,YAAZ,EAA0B;QAC9C,qBAAqBlC,SADyB;QAE9C,wBAAwB8B,QAFsB;QAG9C,wBAAwBC;MAHsB,CAA1B;IAFtB,gBASC,oBAAC,sBAAD;MACC,IAAI,EAAEF,IAAI,aAAMA,IAAN,eAAsBnB,SADjC;MAEC,cAAYzD,MAAM,CAACmB;IAFpB,GAGKkC,kBAHL;MAIC,KAAK,EAAElC,OAJR;MAKC,OAAO,EAAE8E,oBALV;MAMC,QAAQ,EAAE,KAAKlC,eANhB;MAOC,OAAO,EAAE,KAAKmC,cAPf;MAQC,MAAM,EAAE,KAAKC,aARd;MASC,QAAQ,EAAEtB,QAAQ,IAAKxB,kBAAkB,IAAIA,kBAAkB,CAACwB,QATjE;MAUC,QAAQ,EAAEC,QAAQ,IAAKzB,kBAAkB,IAAIA,kBAAkB,CAACyB,QAVjE;MAWC,aAAa,EAAE,KAAKnB;IAXrB,GATD,eAuBC,oBAAC,cAAD;MACC,GAAG,EAAE,KAAKyC,WADX;MAEC,IAAI,EAAC,KAFN;MAGC,YAAY,EAAErB;IAHf,GAIKI,gBAJL,EAKKY,IALL;MAMC,IAAI,EAAEnB,IANP;MAOC,QAAQ,EAAE9E,QAPX;MAQC,OAAO,EAAEqB,OARV;MASC,KAAK,EAAEK,WAAW,IAAI,EATvB;MAUC,QAAQ,EAAE,KAAKF,QAVhB;MAWC,OAAO,EAAE,KAAK4B,OAXf;MAYC,MAAM,EAAE,KAAKC,MAZd;MAaC,QAAQ,EAAE0B,QAbX;MAcC,QAAQ,EAAEC,QAdX;MAeC,cAAc,EAAEI,cAfjB;MAgBC,SAAS,EAAEjG,UAAU,CACpB,iBADoB,EAEpBkG,gBAAgB,IAAIA,gBAAgB,CAACF,SAFjB,EAGpBc,IAAI,CAACd,SAHe;IAhBtB,GAvBD,CADD;EA+CA;;AA5ckD,C,CA+cpD;;;AACA,MAAMoB,gBAAgB,gBAAGtH,KAAK,CAACuH,UAAN,CAAiB,CAACxF,KAAD,EAAQI,GAAR,kBACzC,oBAAC,iBAAD,eAAuBJ,KAAvB;EAA8B,QAAQ,EAAEI;AAAxC,GADwB,CAAzB;AAIAmF,gBAAgB,CAACE,SAAjB,GAA6B;EAC5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrE,KAAK,EAAElD,SAAS,CAACwH,MAVW;;EAY5B;AACD;AACA;AACA;AACA;AACA;AACA;EACClF,QAAQ,EAAEtC,SAAS,CAACyH,IAAV,CAAeC,UAnBG;;EAqB5B;AACD;AACA;AACA;EACCxD,OAAO,EAAElE,SAAS,CAACyH,IAzBS;;EA2B5B;AACD;AACA;AACA;EACCtD,MAAM,EAAEnE,SAAS,CAACyH,IA/BU;;EAiC5B;AACD;AACA;AACA;EACC5B,QAAQ,EAAE7F,SAAS,CAAC2H,IArCQ;;EAuC5B;AACD;AACA;AACA;EACC7B,QAAQ,EAAE9F,SAAS,CAAC2H,IA3CQ;;EA6C5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA5B,YAAY,EAAE/F,SAAS,CAACwH,MAAV,CAAiBE,UAlEH;;EAoE5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAlD,kBAAkB,EAAExE,SAAS,CAAC4H,KAAV,CAAgB,CAAC,UAAD,CAAhB,CAxFQ;EA0F5B;EACA;EACArD,gCAAgC,EAAEvE,SAAS,CAAC2H,IA5FhB;;EA8F5B;AACD;AACA;AACA;AACA;AACA;EACC;EACAvE,cAAc,EAAEpD,SAAS,CAACwH,MArGE;;EAuG5B;AACD;AACA;AACA;AACA;AACA;AACA;EACChE,SAAS,EAAExD,SAAS,CAAC6H,OAAV,CAAkB7H,SAAS,CAACwH,MAA5B,CA9GiB;;EAgH5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCxG,MAAM,EAAEC,cAAc,CAACyG,UA1HK;;EA4H5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrC,OAAO,EAAErF,SAAS,CAAC8H,SAAV,CAAoB,CAC5B9H,SAAS,CAACwH,MADkB,EAE5BxH,SAAS,CAAC6H,OAAV,CAAkB7H,SAAS,CAACwH,MAA5B,CAF4B,CAApB,CAzImB;;EA8I5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCZ,OAAO,EAAE5G,SAAS,CAACwH,MAAV,CAAiBE,UArKE;;EAuK5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACChB,KAAK,EAAE1G,SAAS,CAAC+H,QAAV,CAAmB/H,SAAS,CAACgI,WAA7B,CA7LqB;;EA+L5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrB,aAAa,EAAE3G,SAAS,CAACgI,WAAV,CAAsBN,UAzMT;;EA2M5B;AACD;AACA;EACCrE,sBAAsB,EAAErD,SAAS,CAAC2H,IAAV,CAAeD,UA9MX;;EAgN5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCb,iBAAiB,EAAE7G,SAAS,CAACgI,WAAV,CAAsBN,UAxNb;;EA0N5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtC,mBAAmB,EAAEpF,SAAS,CAAC6H,OAAV,CAAkB7H,SAAS,CAACwH,MAA5B,CAtOO;;EAwO5B;AACD;AACA;EACCxB,KAAK,EAAEhG,SAAS,CAACiI,MA3OW;;EA6O5B;AACD;AACA;EACChC,SAAS,EAAEjG,SAAS,CAACwH,MAhPO;;EAkP5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCnB,sBAAsB,EAAErG,SAAS,CAACgI,WAAV,CAAsBN,UAnQlB;;EAqQ5B;AACD;AACA;AACA;AACA;EACCrD,kBAAkB,EAAErE,SAAS,CAACiI,MA1QF;;EA4Q5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"}