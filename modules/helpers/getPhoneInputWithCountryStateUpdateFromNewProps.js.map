{"version":3,"file":"getPhoneInputWithCountryStateUpdateFromNewProps.js","names":["getInitialPhoneDigits","getCountryForPartialE164Number","parsePhoneNumber","isCountrySupportedWithError","getSupportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","props","prevProps","state","metadata","countries","defaultCountry","newDefaultCountry","value","newValue","reset","newReset","international","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevValue","prevReset","country","hasUserSelectedACountry","_getInitialPhoneDigits","parameters","useNationalFormat","phoneDigits","undefined","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","phoneNumber","parsedCountry","supportedCountries","indexOf","hasUserSelectedACountryUpdate"],"sources":["../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js"],"sourcesContent":["import {\n\tgetInitialPhoneDigits,\n\tgetCountryForPartialE164Number,\n\tparsePhoneNumber\n} from './phoneInputHelpers.js'\n\nimport {\n\tisCountrySupportedWithError,\n\tgetSupportedCountries\n} from './countries.js'\n\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n\tconst {\n\t\tmetadata,\n\t\tcountries,\n\t\tdefaultCountry: newDefaultCountry,\n\t\tvalue: newValue,\n\t\treset: newReset,\n\t\tinternational,\n\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t// superceded by `initialValueFormat` property.\n\t\tdisplayInitialValueAsLocalNumber,\n\t\tinitialValueFormat\n\t} = props\n\n\tconst {\n\t\tdefaultCountry: prevDefaultCountry,\n\t\tvalue: prevValue,\n\t\treset: prevReset\n\t} = prevProps\n\n\tconst {\n\t\tcountry,\n\t\tvalue,\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the `defaultCountry` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\t\thasUserSelectedACountry\n\t} = state\n\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\n\t\t...parameters,\n\t\tinternational,\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n\t\tmetadata\n\t})\n\n\t// Some users requested a way to reset the component\n\t// (both number `<input/>` and country `<select/>`).\n\t// Whenever `reset` property changes both number `<input/>`\n\t// and country `<select/>` are reset.\n\t// It's not implemented as some instance `.reset()` method\n\t// because `ref` is forwarded to `<input/>`.\n\t// It's also not replaced with just resetting `country` on\n\t// external `value` reset, because a user could select a country\n\t// and then not input any `value`, and so the selected country\n\t// would be \"stuck\", if not using this `reset` property.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\tif (newReset !== prevReset) {\n\t\treturn {\n\t\t\tphoneDigits: _getInitialPhoneDigits({\n\t\t\t\tvalue: undefined,\n\t\t\t\tdefaultCountry: newDefaultCountry\n\t\t\t}),\n\t\t\tvalue: undefined,\n\t\t\tcountry: newDefaultCountry,\n\t\t\thasUserSelectedACountry: undefined\n\t\t}\n\t}\n\n\t// `value` is the value currently shown in the component:\n\t// it's stored in the component's `state`, and it's not the `value` property.\n\t// `prevValue` is \"previous `value` property\".\n\t// `newValue` is \"new `value` property\".\n\n\t// If the default country changed\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t// then select it, but only if the user hasn't already manually\n\t// selected a country, and no phone number has been manually entered so far.\n\t// Because if the user has already started inputting a phone number\n\t// then they're okay with no country being selected at all (\"International\")\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\n\tif (newDefaultCountry !== prevDefaultCountry) {\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\n\t\tconst noValueHasBeenEnteredByTheUser = (\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\n\t\t\t!value ||\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n\t\t\t(international && value === _getInitialPhoneDigits({\n\t\t\t\tvalue: undefined,\n\t\t\t\tdefaultCountry: prevDefaultCountry\n\t\t\t}))\n\t\t)\n\t\t// Only update the `defaultCountry` property if no phone number\n\t\t// has been entered by the user or pre-set by the application.\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n\t\t\treturn {\n\t\t\t\tcountry: newDefaultCountry,\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t\tdefaultCountry: newDefaultCountry\n\t\t\t\t}),\n\t\t\t\t// `value` is `undefined` and it stays so.\n\t\t\t\tvalue: undefined\n\t\t\t}\n\t\t}\n\t}\n\n\t// If a new `value` is set externally.\n\t// (e.g. as a result of an ajax API request\n\t//  to get user's phone after page loaded)\n\t// The first part — `newValue !== prevValue` —\n\t// is basically `props.value !== prevProps.value`\n\t// so it means \"if value property was changed externally\".\n\t// The second part — `newValue !== value` —\n\t// is for ignoring the `getDerivedStateFromProps()` call\n\t// which happens in `this.onChange()` right after `this.setState()`.\n\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t// then the country flag would reset on each input.\n\tif (newValue !== prevValue && newValue !== value) {\n\t\tlet phoneNumber\n\t\tlet parsedCountry\n\t\tif (newValue) {\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\n\t\t\tif (phoneNumber && phoneNumber.country) {\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n\t\t\t\t\tparsedCountry = phoneNumber.country\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\n\t\t\t\t\tcountry: undefined,\n\t\t\t\t\tcountries: supportedCountries,\n\t\t\t\t\tmetadata\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlet hasUserSelectedACountryUpdate\n\t\tif (!newValue) {\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\n\t\t\thasUserSelectedACountryUpdate = {\n\t\t\t\thasUserSelectedACountry: undefined\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t...hasUserSelectedACountryUpdate,\n\t\t\tphoneDigits: _getInitialPhoneDigits({\n\t\t\t\tphoneNumber,\n\t\t\t\tvalue: newValue,\n\t\t\t\tdefaultCountry: newDefaultCountry\n\t\t\t}),\n\t\t\tvalue: newValue,\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\n\t\t}\n\t}\n\n\t// `defaultCountry` didn't change.\n\t// `value` didn't change.\n\t// `phoneDigits` didn't change, because `value` didn't change.\n\t//\n\t// So no need to update state.\n}"],"mappings":"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"}