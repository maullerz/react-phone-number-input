{"version":3,"file":"InputBasic.js","names":["createInput","defaultMetadata","InputBasic","ref","value","onChange","country","international","withCountryCallingCode","metadata","inputComponent","Input","rest","prefix","getInputValuePrefix","_onChange","useCallback","event","newValue","parseIncompletePhoneNumber","target","newValueFormatted","format","indexOf","slice","React","forwardRef","propTypes","PropTypes","string","isRequired","func","bool","object","elementType","defaultProps","removeInputValuePrefix","formatIncompletePhoneNumber"],"sources":["../source/InputBasic.js"],"sourcesContent":["import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\n\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js'\n\nexport function createInput(defaultMetadata) {\n\t/**\n\t * `InputBasic` is the most basic implementation of a `Component`\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\n\t * the user's input but doesn't control the caret in the process:\n\t * when erasing or inserting digits in the middle of a phone number\n\t * the caret usually jumps to the end (this is the expected behavior).\n\t * Why does `InputBasic` exist when there's `InputSmart`?\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\n\t */\n\tfunction InputBasic({\n\t\tvalue,\n\t\tonChange,\n\t\tcountry,\n\t\tinternational,\n\t\twithCountryCallingCode,\n\t\tmetadata,\n\t\tinputComponent: Input,\n\t\t...rest\n\t}, ref) {\n\t\tconst prefix = getInputValuePrefix({\n\t\t\tcountry,\n\t\t\tinternational,\n\t\t\twithCountryCallingCode,\n\t\t\tmetadata\n\t\t})\n\n\t\tconst _onChange = useCallback((event) => {\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\n\t\t\t// By default, if a value is something like `\"(123)\"`\n\t\t\t// then Backspace would only erase the rightmost brace\n\t\t\t// becoming something like `\"(123\"`\n\t\t\t// which would give the same `\"123\"` value\n\t\t\t// which would then be formatted back to `\"(123)\"`\n\t\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t\t// Working around this issue with this simple hack.\n\t\t\tif (newValue === value) {\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\n\t\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\n\t\t\t\t}\n\t\t\t}\n\t\t\tonChange(newValue)\n\t\t}, [\n\t\t\tprefix,\n\t\t\tvalue,\n\t\t\tonChange,\n\t\t\tcountry,\n\t\t\tmetadata\n\t\t])\n\n\t\treturn (\n\t\t\t<Input\n\t\t\t\t{...rest}\n\t\t\t\tref={ref}\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\n\t\t\t\tonChange={_onChange}/>\n\t\t)\n\t}\n\n\tInputBasic = React.forwardRef(InputBasic)\n\n\tInputBasic.propTypes = {\n\t\t/**\n\t\t * The parsed phone number.\n\t\t * \"Parsed\" not in a sense of \"E.164\"\n\t\t * but rather in a sense of \"having only\n\t\t * digits and possibly a leading plus character\".\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\t */\n\t\tvalue: PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * A function of `value: string`.\n\t\t * Updates the `value` property.\n\t\t */\n\t\tonChange: PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * A two-letter country code for formatting `value`\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\n\t\t * E.g. \"US\", \"RU\", etc.\n\t\t * If no `country` is passed then `value`\n\t\t * is formatted as an international phone number.\n\t\t * (e.g. `+7 800 555 35 35`)\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\n\t\t * because if `value` is an international number then `country` is ignored.\n\t\t */\n\t\tcountry : PropTypes.string,\n\n\t\t/**\n\t\t * If `country` property is passed along with `international={true}` property\n\t\t * then the phone number will be input in \"international\" format for that `country`\n\t\t * (without \"country calling code\").\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n\t\t * (without \"country calling code\" `+1`).\n\t\t */\n\t\tinternational: PropTypes.bool,\n\n\t\t/**\n\t\t * If `country` and `international` properties are set,\n\t\t * then by default it won't include \"country calling code\" in the input field.\n\t\t * To change that, pass `withCountryCallingCode` property,\n\t\t * and it will include \"country calling code\" in the input field.\n\t\t */\n\t\twithCountryCallingCode: PropTypes.bool,\n\n\t\t/**\n\t\t * `libphonenumber-js` metadata.\n\t\t */\n\t\tmetadata: PropTypes.object.isRequired,\n\n\t\t/**\n\t\t * The `<input/>` component.\n\t\t */\n\t\tinputComponent: PropTypes.elementType.isRequired\n\t}\n\n\tInputBasic.defaultProps = {\n\t\tmetadata: defaultMetadata,\n\t\tinputComponent: 'input'\n\t}\n\n\treturn InputBasic\n}\n\nexport default createInput()\n\nfunction format(prefix, value, country, metadata) {\n\treturn removeInputValuePrefix(\n\t\tformatIncompletePhoneNumber(\n\t\t\tprefix + value,\n\t\t\tcountry,\n\t\t\tmetadata\n\t\t),\n\t\tprefix\n\t)\n}"],"mappings":"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"}